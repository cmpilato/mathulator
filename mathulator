#!/usr/bin/python
#
# Copyright (c) 2015-2017 C. Michael Pilato et al.
# See `LICENSE' file for further details.
#
import sys
import os
import re
import math
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'lib'))
import helpers

_re_integer = re.compile('^[0-9]+$')

last_answer = None
memory_register = 0
while True:
    try:
        input = raw_input(">>> ").strip()
    except (KeyboardInterrupt, EOFError):
        print 
        input = None
    if not input:
        break
    pieces = filter(None, input.split())
    if len(pieces) == 1:
        if pieces[0] == 'help':
            sys.stdout.write("""\
Enter two-operand mathmetical expressions at the prompt, using the
form "OPERAND_1 OPERATOR OPERAND_2" (with spaces).  Supported
operations are as follows:

   +   addition
   -   subtraction
   *   multiplication
   /   division
   %   modulo
   ^   power
   &   logical AND (positive integral operands only)

In place of a numeric operand, you may use one of the following
special characters:

   #   the value of the most recent valid numerical answer
   e   the mathematical constant e = 2.718281...
   pi  the mathematical constant pi = 3.141592...

Instead of an expression of this sort, you may also enter the
following memory operation commands (case matters not):

   M+  Add the value of the most recent successful calculation
       to the value stored in memory.
   M-  Subtract the value of the most recent successful calculation
       from the value stored in memory.
   MC  Clear the memory register (reset to 0).
   MR  Recall the memory register -- that is, print its value.
""")
            continue
        elif pieces[0].lower() == 'm+':
            if last_answer is None:
                print "Only valid when used after a successful calculation."
                continue
            memory_register += last_answer
            print last_answer
            continue
        elif pieces[0].lower() == 'm-':
            if last_answer is None:
                print "Only valid when used after a successful calculation."
                continue
            memory_register -= last_answer
            print last_answer
            continue
        elif pieces[0].lower() == 'mr':
            print memory_register
            continue
        elif pieces[0].lower() == 'mc':
            memory_register = 0
            print memory_register
            continue
        elif pieces[0] == 'q':
            break
        elif pieces[0] == 'exit':
            break
    if len(pieces) != 3:
        print "Bogus expression."
        continue
    op = pieces[1]
    float_needed = False
    if (op in '/'):
        float_needed = True
    arg1 = pieces[0]
    arg2 = pieces[2]
    if (arg1 == '#' or arg2 == '#') and (last_answer is None):
        print "Unable to use previous answer -- there is none!"
        continue
    if arg1 == '#':
        arg1 = str(last_answer)
    if arg2 == '#':
        arg2 = str(last_answer)
    if arg1 == 'e':
        arg1 = str(math.e)
    if arg2 == 'e':
        arg2 = str(math.e)
    if arg1 == 'pi':
        arg1 = str(math.pi)
    if arg2 == 'pi':
        arg2 = str(math.pi)
    try:
        if not float_needed \
           and _re_integer.match(arg1) \
           and _re_integer.match(arg2):
            arg1 = int(arg1)
            arg2 = int(arg2)
        else:
            arg1 = float(arg1)
            arg2 = float(arg2)
    except:
        print "Non-numerical operands."
        continue
    answer = None
    if op == '-':
        answer = helpers.subtract(arg1, arg2)
    elif op == '+':
        answer = helpers.add(arg1, arg2)
    elif op == '*':
        answer = helpers.multiply(arg1, arg2)
    elif op == '/':
        if arg2 == 0:
            print "Division by zero is a no-no!"
        else:
            answer = helpers.divide(arg1, arg2)
    elif op == '%':
        answer = helpers.modulo(arg1, arg2)
    elif op == '^':
        answer = helpers.power(arg1, arg2)
    elif op == '&':
        if (isinstance(arg1, (int, long))
            and isinstance(arg2, (int, long))
            and arg1 >= 0
            and arg2 >= 0):
            answer = helpers.logicand(arg1, arg2)
        else:
            print "Operands must be non-negative integers"
    else:
        print "Unknown operator."
        
    if answer is not None:
        print answer
        last_answer = answer
  
